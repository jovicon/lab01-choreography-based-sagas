# LAB 01
General Project Control:
  [x] Docker Compose
  [x] Config Module
  [] Sanitization library

  [] Connection between services like nest Microservices

  [] Order Module Service - working 90%

  [] Logger Module Service - 30%
    [] health check
    [] path to generate logs
    [] Design Pattern to execute multiples queues at the same time
      [] Which pattern do I have to use?
      [] Strategy pattern
    [] shared queue adapters
    [] Elastic Stack
    [] Kafka
    [] Redis
    [] Nats
    [] NATS Streaming
    [] Jaeger
    [] RabbitMQ

  [] Application HTTP Layer Module
  [] Logger Module Injectable
    [] Color library injectable
    [] Winston injectable
  [] Injectable Error Interceptor
  [] Customer Module Service
    [] Define Customer Service module
  [] TCP Microservice connection definition
    [] Define TCP Microservice connection module
  [] Circuit breaker pattern
    [] Define Circuit breaker pattern module
    [] Reintentar
    [] Fallback to queue
  [] Event-based communication
    [] Define Event-based communication module
  [] SAGA Pattern
    [] Define SAGA Pattern module
  [] Tests
    [] Unit Tests
    [] Integration Tests
    [] E2E Tests

Actual work:
  [] Order Module Service - working 90%
    [] tcp host to config ms
    [] Reorder application folder
    [] Implement SAGA PATTERN

  [] Logger Module Controller
    [] Use Case - Save To Elastic

## DESCRIPTION DETAILS
  Docker Compose:
    [x] Mongo
    [x] Mongo Express
    [x] Kafka
    [x] Elastic Stack
    [] Zookeeper
    [] Kibana
    [] Jaeger
    [] RabbitMQ
    [] Redis
    [] Postgres
    [] MySQL
    [] Nats
    [] NATS Streaming

  Config Module:
    [x] Configure Environment Variables
    [x] Container Structure
    [x] Read .env file
    [x] Read package.json
    [x] Read environment variables from other modules
    [x] Tests

  Order Module Service:
    Module:
      [x] API
      [x] Controller
      [x] Routes
      [x] Health Check
      [x] Tests
      [x] Dockerfile
    Create Order Use Case:
      [x] Use Case
      [x] Controller
      [x] Route
      [x] Repository
        [x] Repository Basic Module
        [x] Repository Adapter
        [x] Order Repository Service
        [x] Events
          [x] Microservice - TCP
          Order Created:
            [x] add
            [x] Emit
            [x] Listen ? SAGA - move to customer service

          [] Event-based - Logger Module

    Clean Code: 
      [] App Controller
        
      [] Tests
  
  Logger Module Service:
    Module:
      [x] Health Check
      [] API
      [] Controller
      [] Routes
      [] Tests
      [] Dockerfile
    Create Logger Use Case:
      [] Use Case - SendQueueMessage
      [] Controller
      [] Route
      [] Repository
        [] Repository Basic Module
        [] Repository Adapter
        [] Logger Repository Service
        [] Events
          [] Microservice - TCP
          Logger Created:
            [] add
            [] Emit
            [] Listen ? SAGA - move to customer service

          [] Event-based - Kafka

      Clean Code: 
        [] App Controller
        
      [] Tests



Que falta para entregar a Sura:
  [x] Enviar evento desde Event Handler
  [x] Recibir eventos en Module Logger

# LAB 2
# GLOBAL GOALS
  General Project Control:
    [x] Docker Compose
    [x] Config Module
    [x] VS code extensions
    [x] Update libraries
    [x] Update docker
    [] Code review
      [x] nanoid or uuid - Nanoid
      [x] Clean DomainEvent
      [] Event Handler
      [] Clean anys
      [] Config
    [] Postman
    [] Plain logs
    [] Reorder from best sura practices
      [] OT 
        [] INJECTION FROM PORTS
        [] SIMPLE USE CASES
      [] TOC SIMPY
      [] BFF
    [] Version desde package json
    [] Best Docker practices
    [] Ordering the TODO List
    [] External libraries mask
      [] dotenv
      [] nanoid
    [] Exceptions handlers
    [] Http good practicas
      [] Routes
      [] Code error handlers
    [] Mongo transactions
    [] Fastify

    [] ChatGPT Code reviews
    [] Docs Folder
    [] Final Diagram
    [] Choreography-based saga
      [] TCP
    [] Orchestration-based saga
    [] Sources documentation
    [] Update source code folders
    [] Multi tenancy DB connection

    Security:
      [] Talisman
      [] JWT
      [] Helmet
      [] Rate Limit
      [] SQL Injection
      [] Sanitization

    Code Quality:
      [] SonarQube
      [] Code Climate
      [] Code Quality
      [] Code Coverage
      [] Code Review
      [] Code Smells
      [] Code Duplication
      [] Code Complexity
      [] Code Security
      [] Code Style

    Unit Test:
      [] Mocks
      [] Infra
      [] Spies
      [] Stubs
    
    Monitoring:
      [] New Relic

    General Architecture:
      [x] Use Case Folder Outside Application Folder?

    Connection between services like nest Microservices:
      [x] TCP
      [x] HTTP
      [] REDIS
      [] Kafka
      [] RabbitMQ
      [] NATS
      [] NATS Streaming
      [] Jaeger
    
    Libraries:
      [] Sanitization library
      [] SQL Injection

    Modules:
      [] Logger Module Injectable - Start to working
        [] Describe into Actual Work

      [] Order Module Service - working 90%

      [] Logger Module Service - 30%
        [x] health check
        [x] path to generate logs
        [] Design Pattern to execute multiples services at the same time
          [] Which pattern do I have to use?
          [] Strategy pattern
        [] Services to Log
          [] Elastic Stack
          [] Mongo
          [] Firebase
          
      [] Queue Module Service
        [] shared queue adapters
          [] Kafka
          [] Redis
          [] Nats
          [] NATS Streaming
          [] Jaeger
          [] RabbitMQ

          
      [] Circuit breaker pattern
        [] Define Circuit breaker pattern module
        [] Reintentar
        [] Fallback to queue
        [] Fallback to database
        [] Fallback to cache
        [] Fallback to another service/microservice
          
      [] Customer Module Service
        [] Define Customer Service module
          
    Utilities:
      [] Logger Utility
        [] Color library injectable
        [] Winston or Logger injectable

      [] Injectable Error Interceptor
      
      [] SAGA Pattern
        [] Define SAGA Pattern module
      
      [] Tests
        [] Unit Tests
        [] Integration Tests
        [] E2E Tests

  Actual work:
    [] Rut Validator
      [] Try catch
      [] Throw error with object

    [] Docs
      [] Separete Clean architecture from principal Readme
      [] Principal Readme Just for Project Diagram, Installation & how it works
      [] Separete Event Driven Docs

    [] Queue event Fallback

    [] Order Module Service - working 90%
      [x] tcp host to config ms
      [x] Reorder application folder
      [] Implement SAGA PATTERN
      [] Application to Class Module
        [] HTTP
      [x] clean code

    [] Logger Module Controller - working 60%
      [] Implement SAGA PATTERN
      [x] Use Case - Save To Elastic
      [x] Creds to config
      [x] Reuse Use Case - Save To Elastic
      [] Application to Class Module
        [] HTTP
        [] TCP
      [] clean code

# DESCRIPTION DETAILS
  Docker Compose:
    [x] Mongo
    [x] Mongo Express
    [x] Kafka
    [x] Elastic Stack
    [] Zookeeper
    [] Kibana
    [] Jaeger
    [] RabbitMQ
    [] Redis
    [] Postgres
    [] MySQL
    [] Nats
    [] NATS Streaming

  Config Module:
    [x] Configure Environment Variables
    [x] Container Structure
    [x] Read .env file
    [x] Read package.json
    [x] Read environment variables from other modules
    [x] Tests

  Order Module Service:
    Module:
      [x] API
      [x] Controller
      [x] Routes
      [x] Health Check
      [x] Tests
      [x] Dockerfile
    Create Order Use Case:
      [x] Use Case
      [x] Controller
      [x] Route
      [x] Repository
        [x] Repository Basic Module
        [x] Repository Adapter
        [x] Order Repository Service
        [x] Events
          [x] Microservice - TCP
          Order Created:
            [x] add
            [x] Emit
            [x] Listen ? SAGA - move to customer service

          [X] Event-based - Logger Module

    Clean Code: 
      [] code quality & clean
      [] Folder Structure
    
      [] Tests
  
  Logger Module Service:
    Module:
      [] Dockerfile

      Config:
        [] Port value to Config

      HTTP:
        [x] Health Check
        [x] API
        [x] Controller
        [x] Routes
        [] Tests

      TCP:
        Events:
          [x] Created Order
          [] Inject Use Case
          [] Tests
    
      Create Logger Use Case:
        [] Use Case - SendQueueMessage
        [] Controller
        [] Route
        [] Repository
          [] Repository Basic Module
          [] Repository Adapter
          [] Logger Repository Service
          [] Events
            [] Microservice - TCP
            Logger Created:
              [] add
              [] Emit
              [] Listen ? SAGA - move to customer service

            [] Event-based - Kafka

        Clean Code: 
          [] App Controller
          
        [] Tests

# SURA
  Que falta para entregar a Sura:
    [x] Enviar evento desde Event Handler
    [x] Recibir eventos en Module Logger
    [] Order Module - Actual Work
    [] Logger Module - Actual Work
    [] Validación de Arquitectura
    [] Presentación


# Sources
- CQRS & Event Driven Design
  - https://www.youtube.com/playlist?list=PLesmOrW3mp4jpSbdFMtVWINJZ7OLdSASS

- Repository: 
  - https://betterprogramming.pub/implementing-a-generic-repository-pattern-using-nestjs-fb4db1b61cce
  - https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design

- Saga pattern:
  - https://blog.bitsrc.io/how-to-use-saga-pattern-in-microservices-9eaadde79748
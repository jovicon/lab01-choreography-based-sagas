# GLOBAL GOALS
  General Project Control:
    [x] Docker Compose
    [x] Config Module
    [x] Choreography-based saga
      [x] TCP
    [x] Final Diagram
    [] Orchestration-based saga

    General Architecture:
      [] Use Case Folder Outside Application Folder?

    Connection between services like nest Microservices:
      [x] TCP
      [x] HTTP
      [] REDIS
      [] NATS
      [] NATS Streaming
      [] Kafka
      [] RabbitMQ
      [] Jaeger  
    
    Libraries:
      [] Sanitization library

    Modules:
      [] Logger Module Injectable - Start to working
        [] Describe into Actual Work

      [] Order Module Service - working 90%

      [] Logger Module Service - 30%
        [x] health check
        [x] path to generate logs
        [] Design Pattern to execute multiples services at the same time
          [] Which pattern do I have to use?
          [] Strategy pattern
        [] Services to Log
          [] Elastic Stack
          [] Mongo
          [] Firebase
          
      [] Queue Module Service
        [] shared queue adapters
          [] Kafka
          [] Redis
          [] Nats
          [] NATS Streaming
          [] Jaeger
          [] RabbitMQ

          
      [] Circuit breaker pattern
        [] Define Circuit breaker pattern module
        [] Reintentar
        [] Fallback to queue
        [] Fallback to database
        [] Fallback to cache
        [] Fallback to another service/microservice
          
      [] Customer Module Service
        [] Define Customer Service module
          
    Utilities:
      [] Logger Utility
        [] Color library injectable
        [] Winston or Logger injectable

      [] Injectable Error Interceptor
      
      [] SAGA Pattern
        [] Define SAGA Pattern module
      
      [] Tests
        [] Unit Tests
        [] Integration Tests
        [] E2E Tests

  Actual work:
    [] Order Module Service - working 80%
      [x] tcp host to config ms
      [x] Reorder application folder
      [] Implement SAGA PATTERN
      [] Application to Class Module
        [] HTTP
      [] clean code

    [] Logger Module Controller - working 50%
      [] Implement SAGA PATTERN
      [x] Use Case - Save To Elastic
      [x] Creds to config
      [x] Reuse Use Case - Save To Elastic
      [] Application to Class Module
        [] HTTP
        [] TCP
      [] clean code

# DESCRIPTION DETAILS
  Docker Compose:
    [x] Mongo
    [x] Mongo Express
    [x] Kafka
    [x] Elastic Stack
    [] Zookeeper
    [] Kibana
    [] Jaeger
    [] RabbitMQ
    [] Redis
    [] Postgres
    [] MySQL
    [] Nats
    [] NATS Streaming

  Config Module:
    [x] Configure Environment Variables
    [x] Container Structure
    [x] Read .env file
    [x] Read package.json
    [x] Read environment variables from other modules
    [x] Tests

  Order Module Service:
    Module:
      [x] API
      [x] Controller
      [x] Routes
      [x] Health Check
      [x] Tests
      [x] Dockerfile
    Create Order Use Case:
      [x] Use Case
      [x] Controller
      [x] Route
      [x] Repository
        [x] Repository Basic Module
        [x] Repository Adapter
        [x] Order Repository Service
        [x] Events
          [x] Microservice - TCP
          Order Created:
            [x] add
            [x] Emit
            [x] Listen ? SAGA - move to customer service

          [X] Event-based - Logger Module

    Clean Code: 
      [] code quality & clean
      [] Folder Structure
    
      [] Tests
  
  Logger Module Service:
    Module:
      [] Dockerfile

      Config:
        [] Port value to Config

      HTTP:
        [x] Health Check
        [x] API
        [x] Controller
        [x] Routes
        [] Tests

      TCP:
        Events:
          [x] Created Order
          [] Inject Use Case
          [] Tests
    
      Create Logger Use Case:
        [] Use Case - SendQueueMessage
        [] Controller
        [] Route
        [] Repository
          [] Repository Basic Module
          [] Repository Adapter
          [] Logger Repository Service
          [] Events
            [] Microservice - TCP
            Logger Created:
              [] add
              [] Emit
              [] Listen ? SAGA - move to customer service

            [] Event-based - Kafka

        Clean Code: 
          [] App Controller
          
        [] Tests

# SURA
  Que falta para entregar a Sura:
    [x] Enviar evento desde Event Handler
    [x] Recibir eventos en Module Logger
    [] Order Module - Actual Work
    [] Logger Module - Actual Work
    [] Validación de Arquitectura
    [] Presentación